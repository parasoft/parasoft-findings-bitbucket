<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="CICD_JavaProjectTemplate-2025-07-30" climode="true" endTime="2025-07-30T11:59:44+08:00" execEnv="win32_x86_64" hasViols="false" id="1751905920011" lang="en_US" machine="XXXX" prjModule="com.parasoft:project-with-default-package" project="CICD_JavaProjectTemplate" tag="Recommended Rules [Parasoft SOAVirt]-com.parasoft:project-with-default-package-${scontrol_branch}-win32_x86_64" time="2025-07-30T11:59:36+08:00" toolDispName="Jtest" toolId="jtest" toolName="DTP Engine for Java" toolVer="2025.1.0" user="XXXX">
   <TestParameters cmdLn="jtestcli -data D:\Workspace\javaprojecttemplate_noViolation\target\jtest\jtest.data.json -config dtp://Recommended Rules [Parasoft SOAVirt] -resource **/src/main/java/ -settings D:\Workspace\javaprojecttemplate_noViolation\localsettings.properties -report D:\Workspace\javaprojecttemplate_noViolation\reports -fail false -monitor false"/>
   <TestConfig machine="XXXX" name="Recommended Rules [Parasoft SOAVirt]" pseudoUrl="jtest.dtp://Recommended Rules [Parasoft SOAVirt]" user="XXXX"/>
   <Authors/>
   <Analyzers>
      <Analyzer id="com.parasoft.jtest.globals.analyzer.GlobalsAnalyzer" name="Parasoft Globals Analyzer" ver="10.7.2.202504161927"/>
      <Analyzer id="com.parasoft.jtest.flowanalyzer" name="Parasoft Java Flow Analyzer" ver="10.7.2.20250414B5614"/>
      <Analyzer id="com.parasoft.jtest.standards.dupcode" name="Code Duplication Detector" ver="10.7.2.20250416-1638"/>
      <Analyzer id="com.parasoft.jtest.globals.ioc.springxml.analyzer.IOCAnalyzer" name="Parasoft IOC Analyzer" ver="10.7.2.202504161927"/>
      <Analyzer id="com.parasoft.jtest.standards.checkers.xml" name="Parasoft XML Static Analyzer" ver="10.7.2.202504161927"/>
      <Analyzer id="com.parasoft.xtest.dupcode.parser" name="Code Duplication Parser" ver="10.7.2.20250416-1638"/>
      <Analyzer id="com.parasoft.jtest.standards.checkers.java" name="Parasoft Java Static Analyzer" ver="10.7.2.202504161927"/>
      <Analyzer id="com.parasoft.jtest.standards.checkers.prop" name="Parasoft Properties Static Analyzer" ver="10.7.2.202504161927"/>
      <Analyzer id="com.parasoft.jtest.standards.metrics.analyzer" name="Parasoft Metrics Analyzer" ver="10.7.2.202504161927"/>
      <Analyzer id="com.parasoft.jtest.standards.checkers.rulewizard" name="Parasoft RuleWizard Static Analyzer" ver="10.7.2.202504161927"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Goals tsks="0">
      
   </Goals>
   <Metrics>
      <Metric avg="19.167" disp="true" id="METRIC.NOPLIF" max="48" min="5" name="Physical Lines in Files" noi="6" stddev="14.69">
         <Info avg="19.167" disp="true" elem="com.parasoft:project-with-default-package" max="48" min="5" noi="6" stddev="14.69"/>
      </Metric>
      <Metric avg="2.882" disp="true" id="METRIC.NOSLIM" max="5" min="1" name="Source Lines in Methods" noi="17" stddev="1.182">
         <Info avg="2.882" disp="true" elem="com.parasoft:project-with-default-package" max="5" min="1" noi="17" stddev="1.182"/>
      </Metric>
   </Metrics>
   <Scope>
      <Repositories/>
      <Locations>
         <Loc hash="-662881149" locRef="1" projId="com.parasoft:project-with-default-package" projPath="/com.parasoft:project-with-default-package" project="com.parasoft:project-with-default-package" resProjPath="src/main/java/com/parasoft/Convertor.java" totLns="14" uri="file:/D:/Workspace/javaprojecttemplate_noViolation/src/main/java/com/parasoft/Convertor.java"/>
         <Loc hash="469181545" locRef="2" projId="com.parasoft:project-with-default-package" projPath="/com.parasoft:project-with-default-package" project="com.parasoft:project-with-default-package" resProjPath="src/main/java/com/parasoft/another/Convertor.java" totLns="14" uri="file:/D:/Workspace/javaprojecttemplate_noViolation/src/main/java/com/parasoft/another/Convertor.java"/>
         <Loc hash="-1790758942" locRef="3" projId="com.parasoft:project-with-default-package" projPath="/com.parasoft:project-with-default-package" project="com.parasoft:project-with-default-package" resProjPath="src/main/java/com/parasoft/interfaces/ICalculator.java" totLns="7" uri="file:/D:/Workspace/javaprojecttemplate_noViolation/src/main/java/com/parasoft/interfaces/ICalculator.java"/>
         <Loc hash="-1706285489" locRef="4" projId="com.parasoft:project-with-default-package" projPath="/com.parasoft:project-with-default-package" project="com.parasoft:project-with-default-package" resProjPath="src/main/java/com/parasoft/interfaces/IConvertor.java" totLns="5" uri="file:/D:/Workspace/javaprojecttemplate_noViolation/src/main/java/com/parasoft/interfaces/IConvertor.java"/>
         <Loc hash="-139948941" locRef="5" projId="com.parasoft:project-with-default-package" projPath="/com.parasoft:project-with-default-package" project="com.parasoft:project-with-default-package" resProjPath="src/main/java/com/parasoft/nested/PhoneFactory.java" totLns="48" uri="file:/D:/Workspace/javaprojecttemplate_noViolation/src/main/java/com/parasoft/nested/PhoneFactory.java"/>
         <Loc hash="-1330183423" locRef="6" projId="com.parasoft:project-with-default-package" projPath="/com.parasoft:project-with-default-package" project="com.parasoft:project-with-default-package" resProjPath="src/main/java/com/parasoft/test/Calculator.java" totLns="27" uri="file:/D:/Workspace/javaprojecttemplate_noViolation/src/main/java/com/parasoft/test/Calculator.java"/>
      </Locations>
   </Scope>
   
  <SetupProblems>
    <Problem msg="Configuration setup problems:" sev="1" totErrs="4" type="ConfigurationSetupProblem">
      <ErrorList>
        <Error val="The rule JDBC.CDBC has been deprecated and should be replaced with BD.RES.LEAKS in your test configuration."/>
        <Error val="The rule PB.USC.CC has been deprecated and should be replaced with BD.PB.CC in your test configuration."/>
        <Error val="The rule BD.PB.ARRAYINP has been renamed to BD.SECURITY.ARRAY."/>
        <Error val="The rule OPT.CIO has been deprecated and should be replaced with BD.RES.LEAKS in your test configuration."/>
      </ErrorList>
    </Problem>
    <Problem msg="Configuration setup information:" sev="0" totErrs="1" type="ConfigurationSetupInfo">
      <ErrorList>
        <Error val="The rule NAMING.ID has been deprecated and will be removed in a future release."/>
      </ErrorList>
    </Problem>
  </SetupProblems>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:03">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="6" checkedLns="115" id="com.parasoft:project-with-default-package" name="com.parasoft:project-with-default-package" qfixErrs="0" suppErrs="0" totErrs="0" totFiles="6" totLns="115"/>
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="" authUrg="" desc="Flow Analysis" name="BD" rules="75" total="0">
               <Category authTot="" authUrg="" desc="API" name="BD.API" rules="3" total="0"/>
               <Category authTot="" authUrg="" desc="Possible Bugs" name="BD.PB" rules="23" total="0"/>
               <Category authTot="" authUrg="" desc="Resources" name="BD.RES" rules="2" total="0"/>
               <Category authTot="" authUrg="" desc="Threads &amp; Synchronization" name="BD.TRS" rules="6" total="0"/>
               <Category authTot="" authUrg="" desc="Collections" name="BD.CO" rules="1" total="0"/>
               <Category authTot="" authUrg="" desc="Exceptions" name="BD.EXCEPT" rules="1" total="0"/>
            </Category>
            <Category authTot="" authUrg="" desc="JavaBeans" name="BEAN" rules="5" total="0"/>
            <Category authTot="" authUrg="" desc="Code Duplication Detection" name="CDD" rules="6" total="0"/>
            <Category authTot="" authUrg="" desc="Coding Conventions" name="CODSTA" rules="114" total="0">
               <Category authTot="" authUrg="" desc="Organization" name="CODSTA.ORG" rules="16" total="0"/>
               <Category authTot="" authUrg="" desc="Error-Prone Coding" name="CODSTA.EPC" rules="16" total="0"/>
               <Category authTot="" authUrg="" desc="Readability" name="CODSTA.READ" rules="39" total="0"/>
            </Category>
            <Category authTot="" authUrg="" desc="Enterprise JavaBeans" name="EJB" rules="62" total="0">
               <Category authTot="" authUrg="" desc="Enterprise JavaBeans 3" name="EJB.EJB3" rules="19" total="0"/>
            </Category>
            <Category authTot="" authUrg="" desc="Exceptions" name="EXCEPT" rules="19" total="0"/>
            <Category authTot="" authUrg="" desc="Garbage Collection" name="GC" rules="12" total="0"/>
            <Category authTot="" authUrg="" desc="Hibernate Framework" name="HIBERNATE" rules="13" total="0"/>
            <Category authTot="" authUrg="" desc="Initialization" name="INIT" rules="14" total="0"/>
            <Category authTot="" authUrg="" desc="Java Database Connectivity" name="JDBC" rules="10" total="0"/>
            <Category authTot="" authUrg="" desc="Naming Conventions" name="NAMING" rules="38" total="0"/>
            <Category authTot="" authUrg="" desc="Object Oriented Programming" name="OOP" rules="35" total="0"/>
            <Category authTot="" authUrg="" desc="Optimization" name="OPT" rules="56" total="0"/>
            <Category authTot="" authUrg="" desc="OWASP Top 10 Most Critical Web Application Security Risks (2021)" name="OWASP2021" rules="93" total="0">
               <Category authTot="" authUrg="" desc="A10-Server-Side Request Forgery" name="OWASP2021.A10" rules="1" total="0"/>
               <Category authTot="" authUrg="" desc="A7-Identification and Authentication Failures" name="OWASP2021.A7" rules="6" total="0"/>
               <Category authTot="" authUrg="" desc="A5-Security Misconfiguration" name="OWASP2021.A5" rules="18" total="0"/>
               <Category authTot="" authUrg="" desc="A4-Insecure Design" name="OWASP2021.A4" rules="16" total="0"/>
               <Category authTot="" authUrg="" desc="A9-Security Logging and Monitoring Failures" name="OWASP2021.A9" rules="2" total="0"/>
               <Category authTot="" authUrg="" desc="A8-Software and Data Integrity Failures" name="OWASP2021.A8" rules="12" total="0"/>
               <Category authTot="" authUrg="" desc="A3-Injection" name="OWASP2021.A3" rules="16" total="0"/>
               <Category authTot="" authUrg="" desc="A2-Cryptographic Failures" name="OWASP2021.A2" rules="20" total="0"/>
               <Category authTot="" authUrg="" desc="A1-Broken Access Control" name="OWASP2021.A1" rules="2" total="0"/>
            </Category>
            <Category authTot="" authUrg="" desc="Possible Bugs" name="PB" rules="145" total="0">
               <Category authTot="" authUrg="" desc="Typographical Errors" name="PB.TYPO" rules="12" total="0"/>
               <Category authTot="" authUrg="" desc="Useless Code" name="PB.USC" rules="14" total="0"/>
               <Category authTot="" authUrg="" desc="Numerical Errors" name="PB.NUM" rules="17" total="0"/>
               <Category authTot="" authUrg="" desc="API Usage and Implementation" name="PB.API" rules="25" total="0"/>
               <Category authTot="" authUrg="" desc="Logical Errors" name="PB.LOGIC" rules="18" total="0"/>
               <Category authTot="" authUrg="" desc="Confusing or Unintended Behavior" name="PB.CUB" rules="33" total="0"/>
               <Category authTot="" authUrg="" desc="Runtime Exceptions" name="PB.RE" rules="18" total="0"/>
            </Category>
            <Category authTot="" authUrg="" desc="Property Files" name="PROPS" rules="17" total="0"/>
            <Category authTot="" authUrg="" desc="Serialization" name="SERIAL" rules="18" total="0"/>
            <Category authTot="" authUrg="" desc="Servlets" name="SERVLET" rules="17" total="0"/>
            <Category authTot="" authUrg="" desc="Spring Framework" name="SPRING" rules="14" total="0"/>
            <Category authTot="" authUrg="" desc="Struts Framework" name="STRUTS" rules="30" total="0"/>
            <Category authTot="" authUrg="" desc="Threads &amp; Synchronization" name="TRS" rules="53" total="0"/>
            <Category authTot="" authUrg="" desc="Unused Code" name="UC" rules="28" total="0"/>
         <CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.API" desc="Make sure implementation of Object.equals(Object) properly handles null values" id="BD.API.EQNULL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.API" desc="Make sure implementation of Object.equals(Object) is reflexive" id="BD.API.EQREFL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.CO" desc="Do not modify collection while iterating over it" id="BD.CO.ITMOD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.EXCEPT" desc="Avoid NullPointerException" id="BD.EXCEPT.NP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.PB" desc="Avoid use before explicit initialization" id="BD.PB.NOTEXPLINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.PB" desc="Avoid use of fields before initialization in constructors and static initializers" id="BD.PB.NOTINITCTOR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.PB" desc="Avoid division by zero" id="BD.PB.ZERO" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.PB" desc="Avoid accessing arrays out of bounds" id="BD.PB.ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.PB" desc="Avoid incorrect shift operations" id="BD.PB.BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.PB" desc="Avoid conditions that always evaluate to the same value" id="BD.PB.CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.RES" desc="Do not use resources that have been freed" id="BD.RES.FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.RES" desc="Ensure resources are deallocated" id="BD.RES.LEAKS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.TRS" desc="Avoid double locking" id="BD.TRS.DLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.TRS" desc="Do not abandon unreleased locks" id="BD.TRS.LOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.TRS" desc="Do not acquire locks in different order" id="BD.TRS.ORDER" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="BD.TRS" desc="Do not use blocking methods while holding a lock" id="BD.TRS.TSHL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="BEAN" desc="Use appropriate signatures for listener method names in JavaBean classes" id="BEAN.BLNC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.dupcode" authTot="" authUrg="" cat="CDD" desc="Avoid method duplication" id="CDD.DUPM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.dupcode" authTot="" authUrg="" cat="CDD" desc="Avoid class duplication" id="CDD.DUPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="CODSTA.EPC" desc="Call 'super.clone()' in all 'clone()' methods" id="CODSTA.EPC.SCLONE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="CODSTA.EPC" desc="Do not use constructors in the 'clone()' method" id="CODSTA.EPC.CLNC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="CODSTA.ORG" desc="Ensure all types have a non default package name" id="CODSTA.ORG.UNDPN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="CODSTA.READ" desc="Avoid nested assignments or assignments embedded in other expressions" id="CODSTA.READ.NEA" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="CODSTA.READ" desc="Do not declare multiple variables of different types in one statement" id="CODSTA.READ.VDT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Declare bean classes &quot;public&quot;" id="EJB.CDP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Do not declare bean classes as &quot;abstract&quot;" id="EJB.CNDA" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Do not declare bean classes as &quot;final&quot;" id="EJB.CNDF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Declare 'ejbCreate()' methods  &quot;public&quot;, but neither &quot;static&quot; nor &quot;final&quot;" id="EJB.CRTE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Implement a no-argument 'ejbCreate()' method for all Message-driven bean classes" id="EJB.MDBC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Do not define 'finalize()' method in bean classes" id="EJB.MNDF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Declare a &quot;public&quot; constructor that takes no parameters in bean classes" id="EJB.NFDC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Declare 'ejbPostCreate()' &quot;public&quot; and neither &quot;static&quot; nor &quot;final&quot;" id="EJB.PCRTE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Make the return type &quot;void&quot; for SessionBeans or MessageDrivenBeans' 'ejbCreate()' methods" id="EJB.RTC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Make the return type &quot;void&quot; for the 'ejbPostCreate()' method" id="EJB.RTP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Avoid passing the &quot;this&quot; reference as an argument" id="EJB.THISARG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Do not return &quot;this&quot;" id="EJB.THISRET" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Do not access or modify security configuration objects" id="EJB.AMSC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Declare all &quot;static&quot; fields in EJB bean classes &quot;final&quot;" id="EJB.NFS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="The return type of EJB finder methods should be the primary key or a collection of primary keys" id="EJB.RT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Do not set or create a new SecurityManager in EJBs" id="EJB.SMSN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Avoid starting, stopping, or managing threads in any way in bean classes" id="EJB.THREAD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB" desc="Do not throw 'java.rmi.RemoteException' in a bean's local interface and local home interface" id="EJB.RILH" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB.EJB3" desc="Call 'InvocationContext.proceed()' from @AroundInvoke methods" id="EJB.EJB3.CPIM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EJB.EJB3" desc="Ensure instance variables of @Stateful beans are Serializable" id="EJB.EJB3.SIVS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EXCEPT" desc="Do not throw exceptions from the constructors of exception classes" id="EXCEPT.TEFEC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EXCEPT" desc="Do not abuse exceptions as flow control statements" id="EXCEPT.AEFC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EXCEPT" desc="Do not use instanceof in a catch block to check the exception type" id="EXCEPT.AIOC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EXCEPT" desc="Always chain thrown exceptions" id="EXCEPT.CTE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="EXCEPT" desc="Do not throw exception types which are too general or are unchecked exceptions" id="EXCEPT.NTERR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="GC" desc="Do not use 'finalize()' methods to unregister listeners" id="GC.FM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="GC" desc="Do not call 'finalize()' explicitly" id="GC.NCF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="GC" desc="Prevent potential memory leaks in ObjectOutputStreams by calling 'reset()'" id="GC.OSTM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="GC" desc="Call 'super.finalize()' from 'finalize()'" id="GC.FCF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="GC" desc="Call 'super.finalize()' in the &quot;finally&quot; block of 'finalize()' methods" id="GC.IFF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="HIBERNATE" desc="Avoid storing unencrypted Hibernate usernames and passwords in 'web.xml' files" id="HIBERNATE.UPWD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="INIT" desc="Avoid uninitialized reads of fields before or during constructor execution" id="INIT.UIRC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="INIT" desc="Do not use a &quot;static&quot; initializer that creates an instance of the current class before all &quot;static final&quot; fields are assigned" id="INIT.SICUI" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="INIT" desc="Do not use initialization circularities for fields" id="INIT.IC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="JDBC" desc="Ensure index is valid in JDBC method invocation" id="JDBC.BRSA" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="JDBC" desc="Close JDBC connections in &quot;finally&quot; blocks" id="JDBC.CDBC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="NAMING" desc="Do not declare types with the same name as types in the Java platform" id="NAMING.DJLO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.rulewizard" authTot="" authUrg="" cat="NAMING" desc="Avoid using potential Java keywords as identifiers" id="NAMING.ID" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="NAMING" desc="Do not use a package name that is reserved by Sun" id="NAMING.RPKG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="NAMING" desc="Avoid using dollar signs in names" id="NAMING.DSN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OOP" desc="Do not hide inherited fields" id="OOP.AHF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OOP" desc="Do not hide inherited &quot;static&quot; member methods" id="OOP.AHSM" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OPT" desc="Close input and output resources in &quot;finally&quot; blocks" id="OPT.CIO" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OPT" desc="Do not use a &quot;private&quot; field that is accessed in only one method; change it to a local variable" id="OPT.CTLV" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OPT" desc="Declare &quot;final&quot; fields with a known compile time value as &quot;static&quot;" id="OPT.NSF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OPT" desc="Declare member classes &quot;static&quot; if possible" id="OPT.SI" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OPT" desc="Avoid unnecessary casting" id="OPT.UNC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A1" desc="Protect against File names injection" id="OWASP2021.A1.TDFNAMES" origId="BD.SECURITY.TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A1" desc="Avoid granting access permission for EJB methods to the 'ANYONE' role" id="OWASP2021.A1.DPANY" origId="EJB.DPANY" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A10" desc="Protect against network resource injection" id="OWASP2021.A10.TDNET" origId="BD.SECURITY.TDNET" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Avoid using insecure cryptographic algorithms for data encryption with Spring" id="OWASP2021.A2.AISSAJAVA" origId="SECURITY.WSC.AISSAJAVA" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A2" desc="Avoid using insecure cryptographic algorithms in Spring XML configurations" id="OWASP2021.A2.AISSAXML" origId="SECURITY.WSC.AISSAXML" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Do not log confidential or sensitive information" id="OWASP2021.A2.CONSEN" origId="SECURITY.ESD.CONSEN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Avoid using hard-coded cryptographic keys" id="OWASP2021.A2.HCCK" origId="SECURITY.WSC.HCCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Ensure the HostnameVerifier.verify() method validates the certificate" id="OWASP2021.A2.HV" origId="SECURITY.WSC.HV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Avoid using insecure algorithms for cryptography" id="OWASP2021.A2.ICA" origId="SECURITY.WSC.ICA" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="MessageDigest objects must process the data with the 'update' method" id="OWASP2021.A2.MCMDU" origId="SECURITY.WSC.MCMDU" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Use hash functions with a salt" id="OWASP2021.A2.MDSALT" origId="SECURITY.WSC.MDSALT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Do not pass exception messages into output in order to prevent the application from leaking sensitive information" id="OWASP2021.A2.PEO" origId="SECURITY.ESD.PEO" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A2" desc="Prevent exposure of sensitive data" id="OWASP2021.A2.SENS" origId="BD.SECURITY.SENS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Initialize KeyGenerator instances" id="OWASP2021.A2.SIKG" origId="SECURITY.WSC.SIKG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Use 'java.security.SecureRandom' instead of 'java.util.Random' or 'Math.random()'" id="OWASP2021.A2.SRD" origId="SECURITY.WSC.SRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Avoid using the javax.crypto.NullCipher class in non-test classes" id="OWASP2021.A2.AUNC" origId="SECURITY.WSC.AUNC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Ensure arguments passed to certain methods come from predefined methods list" id="OWASP2021.A2.ENPP" origId="SECURITY.WSC.ENPP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Avoid non-random &quot;byte[]&quot; when using IvParameterSpec" id="OWASP2021.A2.IVR" origId="SECURITY.WSC.IVR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Properly validate server identity" id="OWASP2021.A2.VSI" origId="SECURITY.WSC.VSI" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Do not hard-code IP addresses and port numbers" id="OWASP2021.A2.HCNA" origId="PORT.HCNA" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A2" desc="Safely serialize sensitive data" id="OWASP2021.A2.SSSD" origId="BD.SECURITY.SSSD" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A2" desc="Use the SSL-enabled version of classes when possible" id="OWASP2021.A2.USC" origId="SECURITY.WSC.USC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A2" desc="Use 'https' instead of 'http' for the 'transportReceiver' and 'transportSender' in 'axis2.xml' configuration files" id="OWASP2021.A2.HTTPS" origId="SECURITY.UEC.HTTPS" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A3" desc="Canonicalize data before validation" id="OWASP2021.A3.CDBV" origId="SECURITY.IBA.CDBV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against Command injection" id="OWASP2021.A3.TDCMD" origId="BD.SECURITY.TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against Jakarta Digester injection" id="OWASP2021.A3.TDDIG" origId="BD.SECURITY.TDDIG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against Environment injection" id="OWASP2021.A3.TDENV" origId="BD.SECURITY.TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against File contents injection" id="OWASP2021.A3.TDFILES" origId="BD.SECURITY.TDFILES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Exclude unsanitized user input from format strings" id="OWASP2021.A3.TDINPUT" origId="BD.SECURITY.TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against JXPath injection" id="OWASP2021.A3.TDJXPATH" origId="BD.SECURITY.TDJXPATH" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against LDAP injection" id="OWASP2021.A3.TDLDAP" origId="BD.SECURITY.TDLDAP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against Library injection" id="OWASP2021.A3.TDLIB" origId="BD.SECURITY.TDLIB" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against HTTP response splitting" id="OWASP2021.A3.TDRESP" origId="BD.SECURITY.TDRESP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against Reflection injection" id="OWASP2021.A3.TDRFL" origId="BD.SECURITY.TDRFL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against SQL injection" id="OWASP2021.A3.TDSQL" origId="BD.SECURITY.TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against XPath injection" id="OWASP2021.A3.TDXPATH" origId="BD.SECURITY.TDXPATH" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against XSS vulnerabilities" id="OWASP2021.A3.TDXSS" origId="BD.SECURITY.TDXSS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A3" desc="Use 'prepareCall' or 'prepareStatement' instead of 'createStatement'" id="OWASP2021.A3.UPS" origId="SECURITY.IBA.UPS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A3" desc="Protect against log forging" id="OWASP2021.A3.TDLOG" origId="BD.SECURITY.TDLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A4" desc="Avoid duplicated forms in the 'validation.xml'" id="OWASP2021.A4.DFV" origId="STRUTS.DFV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A4" desc="Avoid DNS lookups for decision making" id="OWASP2021.A4.DNSL" origId="SECURITY.WSC.DNSL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A4" desc="Ensure method arguments are serializable" id="OWASP2021.A4.ONS" origId="PB.API.ONS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A4" desc="Avoid storing usernames and passwords in plain text in Castor 'jdo-conf.xml' files" id="OWASP2021.A4.PCCF" origId="SECURITY.UEC.PCCF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A4" desc="Avoid storing sensitive data in plaintext in a cookie" id="OWASP2021.A4.PLC" origId="SECURITY.ESD.PLC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A4" desc="Ensure Plugins are added in the 'struts-config.xml'" id="OWASP2021.A4.PLUGIN" origId="STRUTS.PLUGIN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="" authUrg="" cat="OWASP2021.A4" desc="Ensure that passwords are not stored as plaintext and are sufficiently long" id="OWASP2021.A4.PWDPROP" origId="SECURITY.UEC.PWDPROP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A4" desc="Ensure that passwords are not stored as plaintext and are sufficiently long" id="OWASP2021.A4.PWDXML" origId="SECURITY.UEC.PWDXML" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A4" desc="Do not store non-serializable objects as HttpSession attributes" id="OWASP2021.A4.SNSO" origId="SERIAL.SNSO" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A4" desc="Do not store untrusted data in HTTP session" id="OWASP2021.A4.TDSESSION" origId="BD.SECURITY.TDSESSION" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A4" desc="Use the ''getSecure()'' and ''setSecure()'' methods to enforce the use of secure cookies" id="OWASP2021.A4.UOSC" origId="SECURITY.WSC.UOSC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A4" desc="Avoid unencrypted passwords in WebSphere 'ibm-webservicesclient-ext.xmi' files" id="OWASP2021.A4.WCPWD" origId="SECURITY.UEC.WCPWD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A4" desc="Avoid unencrypted passwords in WebSphere 'ibm-webservices-ext.xmi' files" id="OWASP2021.A4.WPWD" origId="SECURITY.UEC.WPWD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A4" desc="Ensure validators are enabled in the 'struts-config.xml'" id="OWASP2021.A4.EV" origId="STRUTS.EV" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A4" desc="Avoid using plain text passwords in Axis 'wsdd' files" id="OWASP2021.A4.PTPT" origId="SECURITY.UEC.PTPT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A4" desc="Ensure sufficient protection against multiple failed authentication attempts" id="OWASP2021.A4.PBFA" origId="SECURITY.WSC.PBFA" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Avoid using the DriverManagerDataSource class in production code" id="OWASP2021.A5.DMDS" origId="SECURITY.WSC.DMDS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Avoid debug information from Spring Security framework to logs" id="OWASP2021.A5.EWSSEC" origId="SECURITY.WSC.EWSSEC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A5" desc="Avoid storing unencrypted Hibernate usernames and passwords in 'web.xml' files" id="OWASP2021.A5.UPWD" origId="HIBERNATE.UPWD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Do not disable CSRF protection" id="OWASP2021.A5.DCSRFJAVA" origId="SPRING.DCSRFJAVA" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A5" desc="Do not disable CSRF protection" id="OWASP2021.A5.DCSRFXML" origId="SPRING.DCSRFXML" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Disable XML external entity injection" id="OWASP2021.A5.DXXE" origId="SECURITY.IBA.DXXE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Do not call the 'printStackTrace()' method of &quot;Throwable&quot; objects" id="OWASP2021.A5.ACPST" origId="SECURITY.WSC.ACPST" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Avoid &quot;try&quot;, &quot;catch&quot; and &quot;finally&quot; blocks with empty bodies" id="OWASP2021.A5.AECB" origId="PB.TYPO.AECB" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Do not catch exception types which are too general or are unchecked exceptions" id="OWASP2021.A5.NCE" origId="CODSTA.EPC.NCE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Do not catch 'NullPointerException'" id="OWASP2021.A5.NCNPE" origId="EXCEPT.NCNPE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Do not throw exception types which are too general or are unchecked exceptions" id="OWASP2021.A5.NTERR" origId="EXCEPT.NTERR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Avoid declaring methods to throw general or unchecked Exception types" id="OWASP2021.A5.NTX" origId="CODSTA.BP.NTX" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A5" desc="Do not declare entity beans as remote" id="OWASP2021.A5.RR" origId="EJB.RR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A5" desc="Always specify error pages in web.xml" id="OWASP2021.A5.SEP" origId="SECURITY.UEC.SEP" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Avoid calling print methods of 'System.err' or 'System.out'" id="OWASP2021.A5.SIO" origId="SECURITY.ESD.SIO" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A5" desc="Ensure Session-ID Length is sufficient" id="OWASP2021.A5.SLID" origId="SECURITY.UEC.SLID" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A5" desc="Restrict cross-origin resource sharing to secure origins" id="OWASP2021.A5.JXCORS" origId="SECURITY.WSC.JXCORS" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A7" desc="Always call 'HttpSession.invalidate()' before 'LoginContext.login()'" id="OWASP2021.A7.ISL" origId="SECURITY.WSC.ISL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A7" desc="Ensure proper session expiration" id="OWASP2021.A7.RUIM" origId="SECURITY.IBA.RUIM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="OWASP2021.A7" desc="Ensure that sessions are configured to time out in 'web.xml' files" id="OWASP2021.A7.STTL" origId="SECURITY.UEC.STTL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.flowanalyzer" authTot="" authUrg="" cat="OWASP2021.A7" desc="Protect against using unprotected credentials" id="OWASP2021.A7.TDPASSWD" origId="BD.SECURITY.TDPASSWD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A7" desc="Do not rely on IP addresses obtained from HTTP request headers for authentication" id="OWASP2021.A7.HTTPRHA" origId="SECURITY.WSC.HTTPRHA" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A7" desc="Avoid using the 'getRequestedSessionId' method from the 'HttpServletRequest' class" id="OWASP2021.A7.HGRSI" origId="SECURITY.WSC.HGRSI" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A8" desc="Always specify absolute paths to execute commands" id="OWASP2021.A8.PBRTE" origId="SECURITY.WSC.PBRTE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A8" desc="Always verify JarFile signatures" id="OWASP2021.A8.VJFS" origId="SECURITY.WSC.VJFS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A8" desc="Avoid parsing untrusted data with XMLDecoder" id="OWASP2021.A8.AUXD" origId="SECURITY.IBA.AUXD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A8" desc="Disable LDAP deserialization" id="OWASP2021.A8.SC" origId="SECURITY.IBA.SC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A8" desc="Assign 'protected' accessibility to 'readResolve()' and 'writeReplace()' methods in serializable classes" id="OWASP2021.A8.MASP" origId="PB.API.MASP" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A8" desc="Define a &quot;readResolve&quot; method for all instances of Serializable types" id="OWASP2021.A8.RRSC" origId="SERIAL.RRSC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A8" desc="Ensure that all fields are assigned by the 'readObject()' method and written out by the 'writeObject()' method" id="OWASP2021.A8.RWAF" origId="SERIAL.RWAF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A8" desc="Always declare writeObject and readObject methods for Serializable subclasses of non-Serializable parents" id="OWASP2021.A8.SCBNP" origId="SERIAL.SCBNP" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A8" desc="Do not declare the 'readObject()' method as &quot;synchronized&quot;" id="OWASP2021.A8.SROS" origId="SERIAL.SROS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A8" desc="Validate objects before deserialization" id="OWASP2021.A8.VOBD" origId="SERIAL.VOBD" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A9" desc="Ensure all exceptions are either logged with a standard logger or rethrown" id="OWASP2021.A9.LGE" origId="SECURITY.UEHL.LGE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="OWASP2021.A9" desc="Ensure all sensitive method invocations are logged" id="OWASP2021.A9.ENFL" origId="SECURITY.BV.ENFL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB" desc="Ensure that exactly one type has the same name as the file name" id="PB.OCSF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Do not call the 'next' method from the 'hasNext' method of an Iterator" id="PB.API.HNCN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Do not use &quot;URL&quot; objects in &quot;Collections&quot; or &quot;Maps&quot;" id="PB.API.IUMS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Do not call 'setSize()' in 'ComponentListener.componentResized()'" id="PB.API.DNCSS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Do not create an empty JarFile entry or an empty ZipFile entry" id="PB.API.EJF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Avoid calling 'equals(null)'" id="PB.API.EQNL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Ensure that all types which are used as keys in Sets and Maps override the 'equals()' and 'hashCode()' methods" id="PB.API.KOEH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Do not overload the 'finalize()' method" id="PB.API.OF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Avoid using &quot;.&quot; as a regular expression in 'String.replaceAll()' and 'String.replaceFirst()'" id="PB.API.REP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Do not pass a 'char' to the 'StringBuffer(int)' constructor" id="PB.API.SBCC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Avoid improper casting of the results of the 'next' methods in the 'java.util.Random' class" id="PB.API.UNI" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Avoid using the 'equals()' and 'hashCode()' methods of &quot;java.net.URL&quot;" id="PB.API.URL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.API" desc="Update values which may be using to compare with vendor properties" id="PB.API.VENDOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.CUB" desc="Avoid using 'return's inside 'finally blocks if thare are other 'return's inside the try-catch block" id="PB.CUB.ARCF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.CUB" desc="Do not exit &quot;finally&quot; blocks abruptly" id="PB.CUB.ATSF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.CUB" desc="Do not use the &quot;+&quot; string concatenation operator to concatenate numbers; use it only to add numbers" id="PB.CUB.DCP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.CUB" desc="Avoid erroneously placing statements outside blocks" id="PB.CUB.EBI" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.CUB" desc="Avoid overloading varargs methods" id="PB.CUB.OVAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.CUB" desc="Do not use &quot;char&quot; arrays in &quot;String&quot; concatenations" id="PB.CUB.SAC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.CUB" desc="Do not use '==' or '!=' to compare objects" id="PB.CUB.UEIC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.CUB" desc="Avoid dangling &quot;else&quot; statements" id="PB.CUB.ADE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.CUB" desc="Avoid confusing assignments to constructor arguments" id="PB.CUB.AWP" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.CUB" desc="Avoid improper concatenation of characters with numbers" id="PB.CUB.CNVC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.CUB" desc="Use the method name 'main()' only for the entry point method" id="PB.CUB.MAIN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.LOGIC" desc="Do not call 'equals()' methods that always return false" id="PB.LOGIC.EQUS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.LOGIC" desc="Avoid calling 'equals()' with same object" id="PB.LOGIC.ESO" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.LOGIC" desc="Avoid infinite recursive method calls" id="PB.LOGIC.FLRC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.LOGIC" desc="Do not increment or decrement on the same variable over multiple nested &quot;for&quot; loop statements" id="PB.LOGIC.JI" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.LOGIC" desc="Avoid bugs in the usage of loop variables" id="PB.LOGIC.INDEX" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.LOGIC" desc="Avoid out of range comparisons" id="PB.LOGIC.OOR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.NUM" desc="Avoid calculations which result in overflow or NaN" id="PB.NUM.ICO" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.NUM" desc="Do not assign the result of an integer division to a floating point variable" id="PB.NUM.IDCD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.NUM" desc="Avoid comparisons to Double.NaN or Float.NaN" id="PB.NUM.NAN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.NUM" desc="Do not initialize array dimensions with negative numbers" id="PB.NUM.NIA" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.NUM" desc="Do not pass floating point values to the 'BigDecimal' constructor" id="PB.NUM.BBDCC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.NUM" desc="Do not use an integer outside the range of [0, 31] as the amount of a shift" id="PB.NUM.BSA" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.NUM" desc="Do not cast primitive data types to lower precision" id="PB.NUM.CLP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.NUM" desc="Do not compare floating point types" id="PB.NUM.DCF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.NUM" desc="Do not use floating point variables as loop indices" id="PB.NUM.FPLI" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.NUM" desc="Avoid casting the result of an integer multiplication to &quot;long&quot;" id="PB.NUM.IMOF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.RE" desc="Do not add a collection to itself" id="PB.RE.ACTI" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.RE" desc="Check whether or not &quot;readLine()&quot; returned null before dereferencing the return value" id="PB.RE.IDRL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.RE" desc="Avoid using methods add() from JLayer class" id="PB.RE.JLAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.RE" desc="When used HttpURLConnection always check return value from the getResponseCode() methods before call getInputStream()" id="PB.RE.RCODE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.RE" desc="Avoid modifying fixed-size Collections" id="PB.RE.AMFSL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.RE" desc="Avoid possible ArrayStoreExceptions" id="PB.RE.ASE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.RE" desc="Ensure 'Iterator.next()' method implementations throw 'NoSuchElementException'" id="PB.RE.CTNSE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.TYPO" desc="Avoid assignment within a condition" id="PB.TYPO.ASI" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.TYPO" desc="Ensure that arguments passed to Java wrapper classes do not contain typos" id="PB.TYPO.WT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.TYPO" desc="Ensure &quot;switch&quot; statements do not contain typos" id="PB.TYPO.TLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.TYPO" desc="Do not give methods and fields the same name as the enclosing class or each other" id="PB.TYPO.NAMING" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.USC" desc="Avoid conditional expressions that always evaluate to a constant value" id="PB.USC.CC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.USC" desc="Avoid unreachable &quot;else if&quot; and &quot;else&quot; cases" id="PB.USC.UIF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.USC" desc="Avoid using &quot;private&quot; fields which are never given a meaningful value" id="PB.USC.FCBS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.USC" desc="Avoid increment and decrement statements which have no effect" id="PB.USC.OI" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.USC" desc="Do not use the unary operator '+'" id="PB.USC.UNARY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.USC" desc="Avoid empty statements" id="PB.USC.AES" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="PB.USC" desc="Avoid self assignments/initializations to fields and/or local variables" id="PB.USC.SAFL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="" authUrg="" cat="PROPS" desc="Avoid duplicated property names" id="PROPS.DUPN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="" authUrg="" cat="PROPS" desc="Avoid empty property names" id="PROPS.EMN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="" authUrg="" cat="PROPS" desc="Avoid incomplete property entries" id="PROPS.ICK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.prop" authTot="" authUrg="" cat="PROPS" desc="Follow the limit for number of property entries" id="PROPS.FM" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="SERIAL" desc="Avoid classes that implement 'Externalizable' but do not define a no-argument constructor" id="SERIAL.ENNAC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="SERIAL" desc="Ensure the return type of 'readResolve()' and 'writeReplace()' methods are 'java.lang.Object'" id="SERIAL.MRWD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="SERIAL" desc="Ensure outer class is serializable if its inner class is serializable" id="SERIAL.OC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="SERIAL" desc="Ensure that the 'readObject()' and 'writeObject()' methods have the correct signature" id="SERIAL.ROWO" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="SERIAL" desc="Avoid serializable classes that extend a superclass without a zero-argument constructor" id="SERIAL.SNNAC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="SERIAL" desc="Ensure Serializable classes are correct" id="SERIAL.NSFSC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="SERIAL" desc="Declare 'serialPersistentFields' &quot;private static final&quot;" id="SERIAL.SPF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="SERIAL" desc="Ensure that all fields are assigned by the 'readObject()' method and written out by the 'writeObject()' method" id="SERIAL.RWAF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="SERVLET" desc="Ensure that all servlets have a corresponding mapping in 'web.xml' files" id="SERVLET.SCM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="SPRING" desc="Follow configuration class conventions" id="SPRING.ATCFG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="STRUTS" desc="Avoid accessing a database from Action Classes" id="STRUTS.ACDA" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="STRUTS" desc="Avoid defining multiple form beans with the same name in 'struts-config.xml' files" id="STRUTS.MFBSN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="STRUTS" desc="Use the 'minlength' validator for password fields in 'validation.xml'" id="STRUTS.MLVP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="STRUTS" desc="Ensure that the @path attribute of '&lt;action>' and '&lt;forward>' elements begins with '/' in 'struts-config.xml' files" id="STRUTS.PFS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.xml" authTot="" authUrg="" cat="STRUTS" desc="Ensure that the 'scope' attribute is set to either &quot;request&quot; or &quot;session&quot; for actions and exceptions in 'struts-config.xml' files" id="STRUTS.RSS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Do not cause deadlocks by calling a &quot;synchronized&quot; method from a &quot;synchronized&quot; method" id="TRS.CSFS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Release Locks in a &quot;finally&quot; block" id="TRS.RLF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Do not synchronize on constant Strings" id="TRS.SCS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Manually synchronize on 'synchronized' collections when iterating over them" id="TRS.SSCI" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Call 'wait()' and 'await()' only inside a loop that tests the liveness condition" id="TRS.UWIL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Do not use variables of the unsafe type 'java.lang.ThreadGroup'" id="TRS.AUTG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Do not call the &quot;start&quot; method of threads from inside a constructor" id="TRS.CSTART" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Do not synchronize on &quot;public&quot; fields since doing so may cause deadlocks" id="TRS.SOPF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Avoid calling unsafe deprecated methods of 'Thread' and 'Runtime'" id="TRS.THRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Do not call 'Thread.sleep()' while holding a lock since doing so can cause poor performance and deadlocks" id="TRS.TSHL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Ensure 'wait()', 'notify()' and 'notifyAll()' are invoked on an object that is clearly synchronized in its enclosing mod scope" id="TRS.NSYN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Do not synchronize on non-final fields since doing so makes it difficult to guarantee mutual exclusion" id="TRS.SOUF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="TRS" desc="Use 'wait()' and 'notifyAll()' instead of polling loops" id="TRS.UWNA" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="UC" desc="Avoid empty static and non-static initializers" id="UC.AESTAT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="UC" desc="Avoid unused labels" id="UC.AUL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="UC" desc="Avoid collection objects that are never read" id="UC.AURCO" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="UC" desc="Avoid local variables that are never read" id="UC.AURV" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="UC" desc="Do not explicitly &quot;import&quot; the java.lang.* &quot;package&quot;" id="UC.DIL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="UC" desc="Avoid empty &quot;finalize()&quot; methods" id="UC.EF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="UC" desc="Avoid empty &quot;synchronized&quot; statements" id="UC.SNE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="UC" desc="Avoid unnecessary 'if' statements" id="UC.UCIF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.jtest.standards.checkers.java" authTot="" authUrg="" cat="UC" desc="Do not import classes from the package that contains the current class" id="UC.PIMPORT" sev="4" total="0"/>
         </RulesList>
         <SeverityList/>
      </Rules>
      
  <Supps/>

      
  <StdViols/>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="0">
            <Project id="com.parasoft:project-with-default-package" name="com.parasoft:project-with-default-package" supp="0" total="0">
               <Res name="src" supp="0" total="0">
                  <Res name="main" supp="0" total="0">
                     <Res name="java" supp="0" total="0">
                        <Res name="com" supp="0" total="0">
                           <Res name="parasoft" supp="0" total="0">
                              <Res loc="/com.parasoft:project-with-default-package/src/main/java/com/parasoft/Convertor.java" locRef="1" locType="sr" name="Convertor.java" supp="0" total="0"/>
                              <Res name="another" supp="0" total="0">
                                 <Res loc="/com.parasoft:project-with-default-package/src/main/java/com/parasoft/another/Convertor.java" locRef="2" locType="sr" name="Convertor.java" supp="0" total="0"/>
                              </Res>
                              <Res name="interfaces" supp="0" total="0">
                                 <Res loc="/com.parasoft:project-with-default-package/src/main/java/com/parasoft/interfaces/ICalculator.java" locRef="3" locType="sr" name="ICalculator.java" supp="0" total="0"/>
                                 <Res loc="/com.parasoft:project-with-default-package/src/main/java/com/parasoft/interfaces/IConvertor.java" locRef="4" locType="sr" name="IConvertor.java" supp="0" total="0"/>
                              </Res>
                              <Res name="nested" supp="0" total="0">
                                 <Res loc="/com.parasoft:project-with-default-package/src/main/java/com/parasoft/nested/PhoneFactory.java" locRef="5" locType="sr" name="PhoneFactory.java" supp="0" total="0"/>
                              </Res>
                              <Res name="test" supp="0" total="0">
                                 <Res loc="/com.parasoft:project-with-default-package/src/main/java/com/parasoft/test/Calculator.java" locRef="6" locType="sr" name="Calculator.java" supp="0" total="0"/>
                              </Res>
                           </Res>
                        </Res>
                     </Res>
                  </Res>
               </Res>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>